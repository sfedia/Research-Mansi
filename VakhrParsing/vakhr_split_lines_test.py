#!/usr/bin/python3
from vakhr_split_lines import *

tests = [
    [
        '''рохтаӈкве застӓвить кричӓть /а°ййәл'тӓх, ӓ ййәптӓх рохтасьлаӈгкве робёть /пәл’х, рөхтәщлӓх''',
        [6]
    ],  # 1
    [
        '''русь юнтуп булӓвка'рөщйук-тэп, булавкә рут родня /рөт, өймәх рут нэ родственница /рөт не, оймәх не''',
        [4, 8]
    ],  # 2
    [
        '''сайт II чӱвство /сӓс йт, сӓ тэл’ сайт III прут, хворостйна /сӓйт, өщтэр''',
        [7]
    ],  # 3
    [
        '''сакпакыг бёрежно, аккурӓтно, опрятно /сӓхпӓкәй, сӓх-пӓхәй; сӓхпӓхәнәй, сӓхпӓх-әӈәй''',
        []
    ],  # 4
    [
        '''ома мӓма /щук, щух ониг 1. мӓчеха; 2. снохӓ /ен'әй, ун'әй''',
        [4]
    ],  # 5
    [
        '''паквкер скорлупӓ кёдрового орёха /пӓ°ккер, пӓ°хкерп; пӓ°кхөсп, пӓ°ххөсп паквсам орёх (кёдровый) /пӓ°ксӓм, пӓ°хсӓм''',
        [8]
    ],  # 6
    [
        '''патыртаӈкве скрыть /па тәр-тӓх, па°трәйтӓх пахвтуӈкве метӓть, кидӓть /пахтәх''',
        [5]
    ],  # 7
    [
        '''хоттимат I какой-нибудь /хӓ°т'әймӓт, ха°т'имӓт, ӓ° лхөтмӓт''',
        []
    ],  # 8
    [
        '''юв-аялаӈкве выпить зӓлпом, проглотйть /йувӓйәл’ӓх, йув-н'ӓ°л’тәмтӓх, йув-н'ӓ л’тэйл’ӓх юв-ванттаӈкве ввестй /йув-вӓ°нттӓх юв-ваӈкуӈкве вползтй /йув-вӓ ӈкдх юв-ватуӈкве съесть (о мед-вёд е) /йув-тех''',
        [11, 15]
    ],  # 9
    [
        '''сивгын суй свист, завывӓнье (вётра) 'щәвйән сөй сивралтаӈкве производйть шброх, шелестёть /щәврәл’-тӓх, щәмрәл’тӓх |''',
        [7]
    ],  # 10
    [
        '''сакпакыг бёрежно, аккурӓтно, опрятно /сӓхпӓкәй, сӓх-пӓхәй; сӓхпӓхәнәй, сӓхпӓх-әӈәй''',
        []
    ],  # 11
    [
        '''варылтан вармаль закӓз /вӓ°-рәл’тӓнӓщ, вӓ°рәл’тӓп варылтаӈкве заказӓть сдёлать что-л . /еӓ°рәл’тӓх варылтаптуӈкве попросйть кого-л. йли чёрез кого-л. сдёлать что-н . /вӓ°рәл’тӓп-тәх''',
        [5, 11]
    ],  # 12
    [
        '''ёл-овуӈкве стечь (о водё) /йа°л-овәх, йа°л-овх ёл-оилматуӈкве уснӱть /йа°л-а°йиЛмӓтэх''',
        [6]
    ],  # 13
    [
        '''кастал грӱстный, печӓльный /кӓ°стӓ°л, кӓ°штӓ°л кастал варуӈкве огорчйть /кӓ°стӓ°л вӓ°рх, кӓ°штӓ°л вӓ°рәх''',
        [5]
    ],  # 14
    [
        '''келптарс кровеносный сосӱд /кел’птӓ°рс''',
        []
    ],  # 15
    [
        '''лакква-тарамлаӈкве разбрестйсь /л’ӓ°квэй-та°рдм-л’ӓх, л’ӓ°хвэй-тӓ°рэмл’ӓх лакква-таратаӈкве распустйть /л’ӓ°квэй-тӓ°рэтӓх, л’ӓ°хвэй-тӓ°рэтӓх; пӓ°л’эй-тӓ°ртӓх''',
        [4]
    ],  # 16
    [
        '''кисуп рябчик /щул’ә кисхатнэ вармаль ббыск /кәсхатнәӓщ, кЭнсәйхатнәӓщ, кәншхатдп''',
        [3]
    ],  # 17
    [
        '''купнитыг легкб /л’ӓ°кщтәй, л’ӓ°хщәтәй, л’ӓ°хщәй купнитысь слегкӓ, налегкё /л’ӓ°кщән'щ, л’ӓ°хщән'щ купнямтаӈкве облегчйть /д’ӓ°-кщәмтӓх, л’ӓ°хщәмтӓх купнятапуӈкве облегчйться (быстро) /л'ӓ°кщәпта°хтәх, л ’ӓ°хщәйта°хтәх кур печь, пёчка /кур курась вёник /вән'х кураталуӈкве прогремёть /курйәл’тӓ°л’әх, курйәйтӓ°-л’әх''',
        [5, 10, 14, 20, 24, 27]
    ],  # 18
]

correct = 0
wrong = []
for e, test in enumerate(tests):
    result = SplitString(test[0]).get_split_positions()
    print("{})".format(e + 1), test[1], '<==>', result, '(result)')
    if result == test[1]:
        correct += 1
    else:
        wrong.append(e)

print()
print('---')
print('{} out of {}'.format(correct, len(tests)))
print('wrong tests:', ', '.join(['N' + str(x + 1) for x in wrong]))
